Pascal - Syntax in EBNF Notation


pascal_program              : `program` identifier [ program_heading ] `;` 
                              block `.`
    
program_heading             : `(` identifier_list `)`
    
identifier_list             : identifier ( `,` identifier )*
    
block                       : [         label_declaration `;` ] 
                              [      constant_declaration `;` ] 
                              [          type_declaration `;` ] 
                              [      variable_declaration `;` ] 
                              [ proc_and_func_declaration `;` ] 
                              `begin` statement_list `end`
    
label_declaration           : `label`               unsigned_integer
                            | label_declaration `,` unsigned_integer
    
constant_declaration        : `const`                  identifier `=` constant
                            | constant_declaration `;` identifier `=` constant
    
type_declaration            : `type`               identifier `=` type
                            | type_declaration `;` identifier `=` type
    
variable_declaration        : `var`                    variable_id_list `:` type
                            | variable_declaration `;` variable_id_list `:` type
    
variable_id_list            : identifier ( `,`  identifier )*
    
constant                    : integer
                            | real
                            | string
                            | const_id
                            | `+` const_id
                            | TADD- const_id
    
type                        : simple_type
                            | structured_type
                            | `^` type_id
    
simple_type                 : `(`  identifier_list `)`
                            | constant `...` constant
                            | type_id
    
structured_type             : `array` `[` index_list `]` `of` type
                            | `record` field_list `end`
                            | `set` `of` simple_type
                            | `file` `of` type
                            | `packed` structured_type
    
index_list                  : simple_type ( `,` simple_type )*
    
field_list                  : fixed_part
                            | fixed_part `;` variant_part
                            | variant_part
    
fixed_part                  : record_field ( `;` record_field )*
    
record_field                : empty
                            | field_id_list `:` type
    
field_id_list               : identifier ( `,`  identifier )*
    
variant_part                : `case` tag_field `of` variant_list
    
tag_field                   : type_id ( `:` type_id )*
    
variant_list                : variant ( `;` variant )*
    
variant                     : empty
                            | case_label_list `:` `(` field_list `)`

case_label_list             : constant ( `,` constant )*

proc_and_func_declaration   : proc_or_func ( `;` proc_or_func )*

proc_or_func                : `procedure` identifier [ parameters ]             `;` block_or_forward
                            | `function`  identifier [ parameters ] `:` type_id `;` block_or_forward

block_or_forward            : block | `forward`

parameters                  : `(` formal_parameter_list `)`

formal_parameter_list       : formal_parameter_section ( `;` formal_parameter_section )*

formal_parameter_section    :       parameter_id_list `:` type_id
                            | `var` parameter_id_list `:` type_id
                            | `procedure` identifier [ parameters ]
                            | `function`  identifier [ parameters ] `:` type_id

parameter_id_list           : identifier ( `,` identifier )*

statement_list              : statement ( `;` statement )*

statement                   : empty
                            | variable `:=` expression
                            | `begin` statement_list `end`
                            | `if` expression `then` statement
                            | `if` expression `then` statement `else` statement
                            | `case` expression `of` case_list `end`
                            | `while` expression `do` statement
                            | `repeat` statement_list `until` expression
                            | `for` var_id `:=` for_list `do` statement
                            | proc_id
                            | proc_id `(` expression_list `)`
                            | `goto` label
                            | `with` record_variable_list `do` statement
                            | label `:` statement

variable                    : identifier
                            | variable `[` subscript_list `]`
                            | variable `.` field_id
                            | variable `^`

subscript_list              : expression ( `,` expression )*

case_list                   :               case_label_list `:` statement
                            | case_list `;` case_label_list `:` statement

for_list                    : expression `to`     expression
                            | expression `downto` expression

expression_list             : expression ( `,` expression )*

label                       : unsigned_integer

record_variable_list        : variable ( `,` variable )*

expression                  : [ expression relational_operator ] additive_expression

relational_operator         : `<` | `<=` | `=` | `<>` | `=>` | `>`

additive_expression         : [ additive_expression additive_operator ] multiplicative_expression

additive_operator           : `+` | `-` | `or`

multiplicative_expression   : [ multiplicative_expression multiplicative_operator ] unary_expression

multiplicative_operator     : `*` | `/` | `div` | `mod` | `and` | `in`

unary_expression            : unary_operator unary_expression | primary_expression

unary_operator              : `+` | `-` | `not`

primary_expression          : variable 
                            | unsigned_integer 
                            | unsigned_real 
                            | string 
                            | nil 
                            | func_id `(` expression_list `)` 
                            | `[` element_list `]` 
                            | `(` expression `)`

element_list                : empty 
                            | element ( `,` element )*

element                     : expression 
                            | expression `...` expression

const_id                    : identifier

type_id                     : identifier

func_id                     : identifier

proc_id                     : identifier

field_id                    : identifier

var_id                      : identifier

empty                       :
